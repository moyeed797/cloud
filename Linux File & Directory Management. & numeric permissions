# Linux File & Directory Management

## 📍 Location
Practiced on AWS EC2 (Amazon Linux) via Git Bash (SSH)

---

## 📂 Tasks Performed

### ✅ Directory Structure
- Created working directory `day7` with subfolders:
  - `today/` (created + deleted)
  - `note/` (used for final file storage)
  - `archive/` (used for moving files)

### ✅ Files Created
- `morning.txt`, `evening.txt`, `night.txt`, `evng.txt`
- Renamed `night.txt` → `start.txt`

---

## 🛠️ Linux Commands Practiced

| Command | Description |
|---------|-------------|
| `mkdir` | Create new directory |
| `cd` | Change directory |
| `touch` | Create new empty file |
| `echo` | Add text to file |
| `cat` | Read file contents |
| `cp` | Copy file |
| `mv` | Move or rename file |
| `rm` | Delete file |
| `rm -r` | Delete directory recursively |
| `ls`, `ls -R`, `ls -l` | List files and structure |

---

## 🔄 Final Folder Structure

```bash
day7/
└── note/
    ├── start.txt
    └── evng.txt


###linux-file-permissions-notes.md
# 📁 Linux File Permissions — Numeric Mode (`chmod`)

## 🔐 What Are File Permissions in Linux?

Every file in Linux has three types of users:
- 👤 **Owner** (user who created the file)
- 👥 **Group** (users in the same group)
- 🌍 **Others** (everyone else)

And three types of access:
- `r` → Read
- `w` → Write
- `x` → Execute

---

## 🔢 Numeric (Octal) Permission System

Permissions are represented by **numbers** (0–7), using this rule:

| Permission | Binary | Value |
|------------|--------|-------|
| Read (`r`) | 100    | 4     |
| Write (`w`)| 010    | 2     |
| Execute (`x`) | 001 | 1     |

Add the values to set permissions:

| Access | Binary | Value | Symbolic |
|--------|--------|--------|-----------|
| `rwx`  | 111    | 7      | full access |
| `rw-`  | 110    | 6      | read + write |
| `r--`  | 100    | 4      | read only |
| `r-x`  | 101    | 5      | read + execute |
| `--x`  | 001    | 1      | execute only |
| `---`  | 000    | 0      | no access |

---

## 🧮 Structure of `chmod XYZ file`

- X = permission for **Owner**
- Y = permission for **Group**
- Z = permission for **Others**

Example:
```bash
chmod 755 script.sh

#####🎯 Common chmod Values
Value	Meaning	Symbolic
600 ---	Only owner can read/write	rw-------
644 ---	Owner rw, others read	rw-r--r--
700	--- Only owner can do everything	rwx------
755 ---	Everyone can read/execute, only owner can write	rwxr-xr-x
400 ---	Read-only for owner	r--------
777 ---	Everyone can do everything ⚠️	rwxrwxrwx

### 🐱 Linux `cat` Command — Functions & Usage

The `cat` (concatenate) command is used to read, create, append, and merge text files in Linux.

---

## 📄 Common `cat` Functions

| Command | Description |
|---------|-------------|
| `cat file.txt` | Displays the contents of `file.txt` |
| `cat > file.txt` | Creates a new file and allows input (overwrites if exists); finish with `Ctrl + D` |
| `cat >> file.txt` | Appends text to the end of an existing file |
| `cat file1.txt file2.txt` | Displays contents of both files |
| `cat file1.txt file2.txt > file3.txt` | Merges file1 and file2 into a new file3 |
| `cat -n file.txt` | Shows file content with line numbers |
| `cat` | Accepts input from user and displays it (until `Ctrl + D`) |

---

## 🧪 Example Practice

```bash
cat > hello.txt
# Type: Hello world!
# Press Ctrl + D

cat hello.txt
# Output: Hello world!

cat >> hello.txt
# Type: Adding more lines...
# Press Ctrl + D

cat hello.txt
# Output:
# Hello world!
# Adding more lines...

cat -n hello.txt
# Output:
#     1	Hello world!
#     2	Adding more lines...


